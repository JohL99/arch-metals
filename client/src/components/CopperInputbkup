import React, { Component } from "react";
import axios from "axios";
import PropTypes from "prop-types";
import { connect } from "react-redux";
import MonthForecast from "./MonthForecast";

class CopperInput extends Component {
  constructor(props) {
    super(props);
    this.state = {
      commodity: "",
      mois: "",
      user: "",
      priceAvr: "",
      price1: "",
      price2: "",
      price3: "",
      price4: "",
      price5: "",
      price6: "",
      price7: "",
      price8: "",
      price9: "",
      percent1: "",
      percent2: "",
      percent3: "",
      percent4: "",
      percent5: "",
      percent6: "",
      percent7: "",
      percent8: "",
      percent9: "",
      justif: "",
      generalcomments: "",
      specificcomments: "",
      comments: "",
      totpercent: "",
      months: [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December",
      ],
      foreprices: [8],
    };

    this.onChange = this.onChange.bind(this);
    this.onSubmit = this.onSubmit.bind(this);
  }

  onChange(e) {
    this.setState({ [e.target.name]: e.target.value });
  }

  onSubmit(e) {
    var date1 = new Date();
    var date2 = date2.toLocaleString();
    const { user } = this.props.auth;

    console.log(user.id);

    e.preventDefault();

    const newEntry = {
      user: user.id,
      commodity: this.state.commodity,
      mois: this.state.mois,
      dateForecast: date2,
      //priceAvr: this.state.priceAvr,
      price1: this.state.price1,
      price2: this.state.price2,
      price3: this.state.price3,
      price4: this.state.price4,
      price5: this.state.price5,
      price6: this.state.price6,
      price7: this.state.price7,
      price8: this.state.price8,
      price9: this.state.price9,
      specificcomments: this.state.specificcomments,
      generalcomments: this.state.generalcomments,
      documentShared: "",
    };

    //this.props.saveInput(newEntry, this.props.history);
    console.log(newEntry);
    axios
      .post("/api/menji/sauvegarde", newEntry)
      .then((res) => {
        console.log(res.data);
      })
      .catch((err) => this.setState({ errors: err.response.data }));
  }

  fillPrices(sanza) {
    this.setState({ price1: "" });
    this.setState({ price2: "" });
    this.setState({ price3: "" });
    this.setState({ price4: "" });
    this.setState({ price5: "" });
    this.setState({ price6: "" });
    this.setState({ price7: "" });
    this.setState({ price8: "" });
    this.setState({ price9: "" });

    fetch("/api/beyi/commois/" + sanza + "&Copper")
      .then((response) => {
        return response.json();
      })
      .then((data) => {
        let yx = data;

        console.log(yx);

        let talo = data.map((mutengo) => {
          //put it in array
          this.setState({ price1: mutengo.floorprice + mutengo.constant1 * 0 });
          this.setState({ price2: mutengo.floorprice + mutengo.constant1 * 1 });
          this.setState({ price3: mutengo.floorprice + mutengo.constant1 * 2 });
          this.setState({ price4: mutengo.floorprice + mutengo.constant1 * 3 });
          this.setState({ price5: mutengo.floorprice + mutengo.constant1 * 4 });
          this.setState({ price6: mutengo.floorprice + mutengo.constant1 * 5 });
          this.setState({ price7: mutengo.floorprice + mutengo.constant1 * 6 });
          this.setState({ price8: mutengo.floorprice + mutengo.constant1 * 7 });
          this.setState({ price9: mutengo.floorprice + mutengo.constant1 * 8 });
          return {
            id: mutengo._id,
          };
        });
      })
      .catch((error) => {
        console.log(error);
      });
  }

  CalculPondere(vraipourcent, indice) {
    this.setState({ priceAvr: "" });
    let Moyenne =
      this.state.price1 * (indice == 1 ? vraipourcent : this.state.percent1) +
      this.state.price2 * (indice == 2 ? vraipourcent : this.state.percent2) +
      this.state.price3 * (indice == 3 ? vraipourcent : this.state.percent3) +
      this.state.price4 * (indice == 4 ? vraipourcent : this.state.percent4) +
      this.state.price5 * (indice == 5 ? vraipourcent : this.state.percent5) +
      this.state.price6 * (indice == 6 ? vraipourcent : this.state.percent6) +
      this.state.price7 * (indice == 7 ? vraipourcent : this.state.percent7) +
      this.state.price8 * (indice == 8 ? vraipourcent : this.state.percent8) +
      this.state.price9 * (indice == 9 ? vraipourcent : this.state.percent9);
    this.setState({ priceAvr: Moyenne });
  }

  TotalPourcent(vraipourcent1, indice1) {
    this.setState({ totpercent: "" });
    let tot =
      (indice1 == 1 ? vraipourcent1 : this.state.percent1) * 100 +
      (indice1 == 2 ? vraipourcent1 : this.state.percent2) * 100 +
      (indice1 == 3 ? vraipourcent1 : this.state.percent3) * 100 +
      (indice1 == 4 ? vraipourcent1 : this.state.percent4) * 100 +
      (indice1 == 5 ? vraipourcent1 : this.state.percent5) * 100 +
      (indice1 == 6 ? vraipourcent1 : this.state.percent6) * 100 +
      (indice1 == 7 ? vraipourcent1 : this.state.percent7) * 100 +
      (indice1 == 8 ? vraipourcent1 : this.state.percent8) * 100 +
      (indice1 == 9 ? vraipourcent1 : this.state.percent9) * 100;
    console.log(indice1);
    console.log((indice1 == 1 ? vraipourcent1 : this.state.percent1) * 100);
    console.log((indice1 == 2 ? vraipourcent1 : this.state.percent2) * 100);
    this.setState({ totpercent: tot });
  }
  render() {
    const { user } = this.props.auth;
    return (
      <div>
        <form noValidate onSubmit={this.onSubmit}>
          <table className="table table-bordered" style={{ width: "75%" }}>
            <tbody>
              <tr>
                <td colSpan="12">
                  <b>
                    Consensus Commodity Price Forecasting Deliberation Panel -
                    Copper Input Sheet
                  </b>
                </td>
              </tr>
              <tr>
                <td className="first">
                  <label for="cmdt">Commodity</label>
                </td>
                <td>
                  <b>Copper</b>
                </td>
                <td className="instruction" rowSpan="3" colSpan="11">
                  <b>Instructions</b>:{" "}
                  <i>
                    Please select a month on the Left for which you want to make
                    a commodity price forecast. Once the month has been
                    selected, please allocate the expected probability you would
                    assign to the indicated price baskets below, such that the
                    total probabilities sums to 100%. It would be greatly
                    appreciated if you could also provide an indication of the
                    basis for your commodity price forecast in the text box at
                    the beneath the forecast probability table. Based on the
                    combined inputs of all panel participants, a consensus
                    commodity price forecast has been computed, please feel free
                    to comment on the result relative to your views and other
                    participants if you chose.
                  </i>
                </td>
              </tr>
              <tr>
                <td className="first">
                  <label for="mnth">Month</label>
                </td>
                <td>
                  <select
                    id="mnth"
                    name="month"
                    value={this.state.month}
                    onChange={(e) => {
                      this.setState({
                        month: e.target.value,
                        validationError:
                          e.target.value === "" ? "Select a month" : "",
                      });
                      this.fillPrices(e.target.value);
                    }}
                  >
                    <option value="">-- Select a month --</option>
                    {this.state.months
                      .slice(new Date().getMonth(), 12)
                      .map((lemois) => (
                        <option key={lemois.value} value={lemois.value}>
                          {lemois + " " + new Date().getFullYear()}
                        </option>
                      ))}
                  </select>
                </td>
              </tr>
              <tr>
                <td className="first">
                  <label for="cUserN">Copper Username</label>
                </td>
                <td>
                  <h3>{user.name}</h3>
                </td>
              </tr>
              <tr>
                <td className="first">Forecast price</td>
                <td>
                  Copper{" "}
                  {
                    /*this.state.months[new Date().getMonth()]*/ this.state
                      .month
                  }
                </td>
                <td id="avrg">{this.state.priceAvr}</td>
                <td id=""> {this.state.price1} </td>
                <td id="">{this.state.price2}</td>
                <td id="">{this.state.price3}</td>
                <td id="">{this.state.price4}</td>
                <td id="">{this.state.price5}</td>
                <td id="">{this.state.price6}</td>
                <td id="">{this.state.price7}</td>
                <td id="">{this.state.price8}</td>
                <td id="">{this.state.price9}</td>
              </tr>
              <tr>
                <td className="first">Forecast estimate</td>
                <td>NB: total must equal 100%</td>
                <td id="sum_percent">{this.state.totpercent} %</td>
                <td id="">
                  <select
                    className="percent"
                    name="percent1"
                    value={this.state.percent1}
                    onChange={(e) => {
                      this.setState({
                        percent1: e.target.value,
                        validationError:
                          e.target.value === "" ? "vous devez " : "",
                      });
                      this.CalculPondere(e.target.value, 1);
                      this.TotalPourcent(e.target.value, 1);
                    }}
                  >
                      <option value="0"> 0%</option>
                      <option value="0.05"> 5%</option>
                      <option value="0.10"> 10%</option>
                      <option value="0.15"> 15%</option>
                      <option value="0.20"> 20%</option>
                      <option value="0.25"> 25%</option>
                      <option value="0.30"> 30%</option>
                      <option value="0.35"> 35%</option>
                      <option value="0.40"> 40%</option>
                      <option value="0.45"> 55%</option>
                      <option value="0.50"> 50%</option>
                      <option value="0.55"> 55%</option>
                      <option value="0.60"> 60%</option>
                      <option value="0.65"> 65%</option>
                      <option value="0.70"> 70%</option>
                      <option value="0.75"> 75%</option>
                      <option value="0.80"> 80%</option>
                      <option value="0.85"> 85%</option>
                      <option value="0.90"> 90%</option>
                      <option value="0.95"> 95%</option>
                      <option value="1">100%</option>
                  </select>
                </td>
                <td id="">
                  <select
                    className="percent"
                    name="percent2"
                    value={this.state.percent2}
                    onChange={(e) => {
                      this.setState({
                        percent2: e.target.value,
                        validationError:
                          e.target.value === ""
                            ? "vous devez sélectionner le truck"
                            : "",
                      });
                      this.CalculPondere(e.target.value, 2);
                      this.TotalPourcent(e.target.value, 2);
                    }}
                  >
                      <option value="0"> 0%</option>
                      <option value="0.05"> 5%</option>
                      <option value="0.10"> 10%</option>
                      <option value="0.15"> 15%</option>
                      <option value="0.20"> 20%</option>
                      <option value="0.25"> 25%</option>
                      <option value="0.30"> 30%</option>
                      <option value="0.35"> 35%</option>
                      <option value="0.40"> 40%</option>
                      <option value="0.45"> 55%</option>
                      <option value="0.50"> 50%</option>
                      <option value="0.55"> 55%</option>
                      <option value="0.60"> 60%</option>
                      <option value="0.65"> 65%</option>
                      <option value="0.70"> 70%</option>
                      <option value="0.75"> 75%</option>
                      <option value="0.80"> 80%</option>
                      <option value="0.85"> 85%</option>
                      <option value="0.90"> 90%</option>
                      <option value="0.95"> 95%</option>
                      <option value="1">100%</option>
                  </select>
                </td>
                <td id="">
                  <select
                    className="percent"
                    name="percent3"
                    value={this.state.percent3}
                    onChange={(e) => {
                      this.setState({
                        percent3: e.target.value,
                        validationError:
                          e.target.value === ""
                            ? "vous devez sélectionner le truck"
                            : "",
                      });
                      this.CalculPondere(e.target.value, 3);
                      this.TotalPourcent(e.target.value, 3);
                    }}
                  >
                      <option value="0"> 0%</option>
                      <option value="0.05"> 5%</option>
                      <option value="0.10"> 10%</option>
                      <option value="0.15"> 15%</option>
                      <option value="0.20"> 20%</option>
                      <option value="0.25"> 25%</option>
                      <option value="0.30"> 30%</option>
                      <option value="0.35"> 35%</option>
                      <option value="0.40"> 40%</option>
                      <option value="0.45"> 55%</option>
                      <option value="0.50"> 50%</option>
                      <option value="0.55"> 55%</option>
                      <option value="0.60"> 60%</option>
                      <option value="0.65"> 65%</option>
                      <option value="0.70"> 70%</option>
                      <option value="0.75"> 75%</option>
                      <option value="0.80"> 80%</option>
                      <option value="0.85"> 85%</option>
                      <option value="0.90"> 90%</option>
                      <option value="0.95"> 95%</option>
                      <option value="1">100%</option>
                  </select>
                </td>
                <td id="">
                  <select
                    className="percent"
                    name="percent4"
                    value={this.state.percent4}
                    onChange={(e) => {
                      this.setState({
                        percent4: e.target.value,
                        validationError:
                          e.target.value === ""
                            ? "vous devez sélectionner le truck"
                            : "",
                      });
                      this.CalculPondere(e.target.value, 4);
                      this.TotalPourcent(e.target.value, 4);
                    }}
                  >
                      <option value="0"> 0%</option>
                      <option value="0.05"> 5%</option>
                      <option value="0.10"> 10%</option>
                      <option value="0.15"> 15%</option>
                      <option value="0.20"> 20%</option>
                      <option value="0.25"> 25%</option>
                      <option value="0.30"> 30%</option>
                      <option value="0.35"> 35%</option>
                      <option value="0.40"> 40%</option>
                      <option value="0.45"> 55%</option>
                      <option value="0.50"> 50%</option>
                      <option value="0.55"> 55%</option>
                      <option value="0.60"> 60%</option>
                      <option value="0.65"> 65%</option>
                      <option value="0.70"> 70%</option>
                      <option value="0.75"> 75%</option>
                      <option value="0.80"> 80%</option>
                      <option value="0.85"> 85%</option>
                      <option value="0.90"> 90%</option>
                      <option value="0.95"> 95%</option>
                      <option value="1">100%</option>
                  </select>
                </td>
                <td id="">
                  <select
                    className="percent"
                    name="percent5"
                    value={this.state.percent5}
                    onChange={(e) => {
                      this.setState({
                        percent5: e.target.value,
                        validationError:
                          e.target.value === ""
                            ? "vous devez sélectionner le truck"
                            : "",
                      });
                      this.CalculPondere(e.target.value, 5);
                      this.TotalPourcent(e.target.value, 5);
                    }}
                  >
                      <option value="0"> 0%</option>
                      <option value="0.05"> 5%</option>
                      <option value="0.10"> 10%</option>
                      <option value="0.15"> 15%</option>
                      <option value="0.20"> 20%</option>
                      <option value="0.25"> 25%</option>
                      <option value="0.30"> 30%</option>
                      <option value="0.35"> 35%</option>
                      <option value="0.40"> 40%</option>
                      <option value="0.45"> 55%</option>
                      <option value="0.50"> 50%</option>
                      <option value="0.55"> 55%</option>
                      <option value="0.60"> 60%</option>
                      <option value="0.65"> 65%</option>
                      <option value="0.70"> 70%</option>
                      <option value="0.75"> 75%</option>
                      <option value="0.80"> 80%</option>
                      <option value="0.85"> 85%</option>
                      <option value="0.90"> 90%</option>
                      <option value="0.95"> 95%</option>
                      <option value="1">100%</option>
                  </select>
                </td>
                <td id="">
                  <select
                    className="percent"
                    name="percent6"
                    value={this.state.percent6}
                    onChange={(e) => {
                      this.setState({
                        percent6: e.target.value,
                        validationError:
                          e.target.value === ""
                            ? "vous devez sélectionner le truck"
                            : "",
                      });
                      this.CalculPondere(e.target.value, 6);
                      this.TotalPourcent(e.target.value, 6);
                    }}
                  >
                      <option value="0"> 0%</option>
                      <option value="0.05"> 5%</option>
                      <option value="0.10"> 10%</option>
                      <option value="0.15"> 15%</option>
                      <option value="0.20"> 20%</option>
                      <option value="0.25"> 25%</option>
                      <option value="0.30"> 30%</option>
                      <option value="0.35"> 35%</option>
                      <option value="0.40"> 40%</option>
                      <option value="0.45"> 55%</option>
                      <option value="0.50"> 50%</option>
                      <option value="0.55"> 55%</option>
                      <option value="0.60"> 60%</option>
                      <option value="0.65"> 65%</option>
                      <option value="0.70"> 70%</option>
                      <option value="0.75"> 75%</option>
                      <option value="0.80"> 80%</option>
                      <option value="0.85"> 85%</option>
                      <option value="0.90"> 90%</option>
                      <option value="0.95"> 95%</option>
                      <option value="1">100%</option>
                  </select>
                </td>
                <td id="">
                  <select
                    className="percent"
                    name="percent7"
                    value={this.state.percent7}
                    onChange={(e) => {
                      this.setState({
                        percent7: e.target.value,
                        validationError:
                          e.target.value === ""
                            ? "vous devez sélectionner le truck"
                            : "",
                      });
                      this.CalculPondere(e.target.value, 7);
                      this.TotalPourcent(e.target.value, 7);
                    }}
                  >
                      <option value="0"> 0%</option>
                      <option value="0.05"> 5%</option>
                      <option value="0.10"> 10%</option>
                      <option value="0.15"> 15%</option>
                      <option value="0.20"> 20%</option>
                      <option value="0.25"> 25%</option>
                      <option value="0.30"> 30%</option>
                      <option value="0.35"> 35%</option>
                      <option value="0.40"> 40%</option>
                      <option value="0.45"> 55%</option>
                      <option value="0.50"> 50%</option>
                      <option value="0.55"> 55%</option>
                      <option value="0.60"> 60%</option>
                      <option value="0.65"> 65%</option>
                      <option value="0.70"> 70%</option>
                      <option value="0.75"> 75%</option>
                      <option value="0.80"> 80%</option>
                      <option value="0.85"> 85%</option>
                      <option value="0.90"> 90%</option>
                      <option value="0.95"> 95%</option>
                      <option value="1">100%</option>
                  </select>
                </td>
                <td id="">
                  <select
                    className="percent"
                    name="percent8"
                    value={this.state.percent8}
                    onChange={(e) => {
                      this.setState({
                        percent8: e.target.value,
                        validationError:
                          e.target.value === ""
                            ? "vous devez sélectionner le truck"
                            : "",
                      });
                      this.CalculPondere(e.target.value, 8);
                      this.TotalPourcent(e.target.value, 8);
                    }}
                  >
                      <option value="0"> 0%</option>
                      <option value="0.05"> 5%</option>
                      <option value="0.10"> 10%</option>
                      <option value="0.15"> 15%</option>
                      <option value="0.20"> 20%</option>
                      <option value="0.25"> 25%</option>
                      <option value="0.30"> 30%</option>
                      <option value="0.35"> 35%</option>
                      <option value="0.40"> 40%</option>
                      <option value="0.45"> 55%</option>
                      <option value="0.50"> 50%</option>
                      <option value="0.55"> 55%</option>
                      <option value="0.60"> 60%</option>
                      <option value="0.65"> 65%</option>
                      <option value="0.70"> 70%</option>
                      <option value="0.75"> 75%</option>
                      <option value="0.80"> 80%</option>
                      <option value="0.85"> 85%</option>
                      <option value="0.90"> 90%</option>
                      <option value="0.95"> 95%</option>
                      <option value="1">100%</option>
                  </select>
                </td>
                <td id="">
                  <select
                    className="percent"
                    name="percent9"
                    value={this.state.percent9}
                    onChange={(e) => {
                      this.setState({
                        percent9: e.target.value,
                        validationError:
                          e.target.value === ""
                            ? "vous devez sélectionner le truck"
                            : "",
                      });
                      this.CalculPondere(e.target.value, 9);
                      this.TotalPourcent(e.target.value, 9);
                    }}
                  >
                      <option value="0"> 0%</option>
                      <option value="0.05"> 5%</option>
                      <option value="0.10"> 10%</option>
                      <option value="0.15"> 15%</option>
                      <option value="0.20"> 20%</option>
                      <option value="0.25"> 25%</option>
                      <option value="0.30"> 30%</option>
                      <option value="0.35"> 35%</option>
                      <option value="0.40"> 40%</option>
                      <option value="0.45"> 55%</option>
                      <option value="0.50"> 50%</option>
                      <option value="0.55"> 55%</option>
                      <option value="0.60"> 60%</option>
                      <option value="0.65"> 65%</option>
                      <option value="0.70"> 70%</option>
                      <option value="0.75"> 75%</option>
                      <option value="0.80"> 80%</option>
                      <option value="0.85"> 85%</option>
                      <option value="0.90"> 90%</option>
                      <option value="0.95"> 95%</option>
                      <option value="1">100%</option>
                  </select>
                </td>
              </tr>
              <tr>
                <td className="first">Forecast justication</td>
                <td colSpan="11">
                  <textarea
                    name="justif"
                    onChange={this.onChange}
                    value={this.state.specificcomments}
                    placeholder="NB: Please briefly explain the basis for your commodity price forecast


                  "
                    rows="4"
                    style={{ width: "100%" }}
                  ></textarea>
                </td>
              </tr>
              <tr>
                <td className="first">General Comments</td>
                <td colSpan="11">
                  <textarea
                    name="comments"
                    onChange={this.onChange}
                    value={this.state.generalcomments}
                    placeholder="NB: If you wish to make any general comments about the consensus commodity price forecast


                  "
                    rows="5"
                    style={{ width: "100%" }}
                  ></textarea>
                </td>
              </tr>
              <tr>
                <td className="first">Share document</td>
                <td>
                  <input type="file" id="myFile" name="filename" />
                </td>
                <td colSpan="10">
                  <i>
                    {" "}
                    NB: Please briefly explain the relevance of the document to
                    copper price forecasts. (Please ensure you are permitted to
                    share the document before sharing){" "}
                  </i>
                </td>
              </tr>
              <tr>
                <td className="first">Submit forecast</td>
                <td>
                  {/*    <button
                  type="button"
                  name="Submit"
                  className="btn btn-info btn-block mt-4"
                >
                  Yes
                </button> */}
                  <input
                    type="submit"
                    placeholder="YES"
                    className="btn btn-info btn-block mt-4"
                  />
                </td>
                <td colSpan="10">
                  <i>
                    NB: You can submit forecasts as often as you chose. Please
                    try keep forecasts realistic. Any abnormal or extreme
                    forecasts (more than 50% different from the prevailing
                    consensus forecast will be ignored in any calculations).
                  </i>
                </td>
              </tr>
              <tr>
                <td className="first">Date</td>
                <td>
                  <p id="Date">
                    {new Date().toLocaleDateString("en-US", {
                      weekday: "long",
                      year: "numeric",
                      month: "long",
                      day: "numeric",
                    })}
                  </p>
                </td>
                <td colSpan="10" rowSpan="2">
                  <i>
                    NB: This will be the date and time used to record your
                    commodity price forecast. The date and time will also be
                    used in the ranking calculations.
                  </i>
                </td>
              </tr>
              <tr>
                <td className="first">Time</td>
                <td>
                  <p id="Time">{new Date().toLocaleTimeString()}</p>
                </td>
              </tr>
            </tbody>
          </table>
        </form>
        <div>
          <MonthForecast />
        </div>
      </div>
    );
  }
}

CopperInput.propTypes = {
  //logoutUser: PropTypes.func.isRequired,
  auth: PropTypes.object.isRequired,
};

const mapStateToProps = (state) => ({
  auth: state.auth,
});

export default connect(mapStateToProps, {})(CopperInput);


                     value={
                        this.state.months[new Date().getMonth()] +
                        " " +
                        new Date().getFullYear()
                      }
                    >
                      {this.state.months[new Date().getMonth()] +
                        " " +
                        new Date().getFullYear()}